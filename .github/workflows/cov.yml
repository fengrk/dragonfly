name: Daily Coverage Roman

on:
  workflow_dispatch:

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - container: "ubuntu-dev:20"
            build-type: Debug
            compiler: {cxx: g++, c: gcc}
            cxx_flags: "-fprofile-arcs -ftest-coverage"
    timeout-minutes: 30
    container:
      image: ghcr.io/romange/${{ matrix.container }}
      credentials:
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
      - name: Install dependencies
        run: |
          uname -a
          cmake --version
          apt update && apt install -y lcov pip
          mkdir -p build
      - name: Cache build deps
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: |
            ~/.ccache
            $GITHUB_WORKSPACE/build/_deps
          key: ${{ runner.os }}-deps-${{ github.base_ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-deps-${{ github.base_ref }}-

      - name: Configure CMake
        run: |
            pip install -r tests/dragonfly/requirements.txt
            cmake -B build \
              -DCMAKE_BUILD_TYPE=${{matrix.build-type}} \
              -GNinja \
              -DCMAKE_C_COMPILER="${{matrix.compiler.c}}" \
              -DCMAKE_CXX_COMPILER="${{matrix.compiler.cxx}}" \
              -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
              -DCMAKE_CXX_FLAGS="${{matrix.cxx_flags}}" \
              -L
            pwd
            cd build && pwd
      - name: Build & Test
        run: |
          cd $GITHUB_WORKSPACE/build
          ninja io_test
          ./io_test
          lcov -c -d . -o main_coverage.info
          lcov --remove main_coverage.info -o main_coverage.info '/usr/*' '*/_deps/*' '*/third_party/*'
          genhtml main_coverage.info --ignore-errors source --output-directory covout -p $GITHUB_WORKSPACE
          ls ./
          echo ls covout
          ls covout/

      - name: Upload coverage
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: build/covout/
          if-no-files-found: error
